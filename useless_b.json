{
  "AWSTemplateFormatVersion" : "2010-09-09",
  "Description" : "Highly available configuration of ArcGIS Portal, Server, and DataStore (Ubuntu)",
  "Mappings" : {
    "RegionMap" : {
      "ap-northeast-1" : {
        "en" : "ami-d1a243b0"
      },
      "ap-northeast-2" : {
        "en" : "ami-c0874cae"
      },
      "ap-southeast-1" : {
        "en" : "ami-4b35e328"
      },
      "ap-southeast-2" : {
        "en" : "ami-2e547b4d"
      },
      "eu-central-1" : {
        "en" : "ami-898f63e6"
      },
      "eu-west-1" : {
        "en" : "ami-a99b0fda"
      },
      "sa-east-1" : {
        "en" : "ami-20a62e4c"
      },
      "us-east-1" : {
        "en" : "ami-e9836b84"
      },
      "us-west-1" : {
        "en" : "ami-a2770fc2"
      },
      "us-west-2" : {
        "en" : "ami-390af659"
      },
      "ap-south-1" : {
        "en" : "ami-291a7046"
      }
    }
  },
  "Parameters" : {
    "AZs" : {
      "Type" : "List<AWS::EC2::AvailabilityZone::Name>",
      "Description" : "Select two availability zones for your VPC subnets"
    },
    "DeploymentBucket" : {
      "Description" : "S3 bucket with authorization files and SSL certificates",
      "Type" : "String",
      "AllowedPattern" : "[a-zA-Z][0-9a-zA-Z-_.]{2,62}",
      "ConstraintDescription" : "S3 bucket name must be between 3 and 63 characters and and must start with a letter."
    },
    "DriveSizeRoot" : {
      "Default" : "100",
      "Description" : "The size of the C: Drive in GB.",
      "Type" : "Number",
      "MinValue" : "100",
      "MaxValue" : "1024",
      "ConstraintDescription" : "Must be between 100 and 1024 GB."
    },
    "DriveSizeData" : {
      "Default" : "100",
      "Description" : "The size of the D: Drive in GB.",
      "Type" : "Number",
      "MinValue" : "10",
      "MaxValue" : "1024",
      "ConstraintDescription" : "Must be between 10 and 1024 GB."
    },
    "FSInstanceType" : {
      "Description" : "The file server EC2 instance type",
      "Type" : "String",
      "AllowedValues" : [
        "m3.large", "m3.xlarge", "m3.2xlarge",
        "m4.large", "m4.xlarge", "m4.2xlarge", "m4.4xlarge", "m4.10xlarge",
        "c4.large", "c4.xlarge", "c4.2xlarge", "c4.4xlarge", "c4.8xlarge",
        "c3.large", "c3.xlarge", "c3.2xlarge", "c3.4xlarge", "c3.8xlarge",
        "r3.large", "r3.xlarge", "r3.2xlarge", "r3.4xlarge", "r3.8xlarge"
      ],
      "Default" : "m3.large",
      "ConstraintDescription" : "Only C3, C4, M3, and R3 instance types are supported"
    },
    "ASInstanceType" : {
      "Description" : "The Web GIS EC2 instance type",
      "Type" : "String",
      "AllowedValues" : [
        "m3.large", "m3.xlarge", "m3.2xlarge",
        "m4.large", "m4.xlarge", "m4.2xlarge", "m4.4xlarge", "m4.10xlarge",
        "c4.large", "c4.xlarge", "c4.2xlarge", "c4.4xlarge", "c4.8xlarge",
        "c3.large", "c3.xlarge", "c3.2xlarge", "c3.4xlarge", "c3.8xlarge",
        "r3.large", "r3.xlarge", "r3.2xlarge", "r3.4xlarge", "r3.8xlarge"
      ],
      "Default" : "m3.large"
    },
    "BDSInstanceType" : {
      "Description" : "Spatio-temporal Big Data Store EC2 instance type",
      "Type" : "String",
      "AllowedValues" : [
        "m3.large", "m3.xlarge", "m3.2xlarge",
        "m4.large", "m4.xlarge", "m4.2xlarge", "m4.4xlarge", "m4.10xlarge",
        "c4.large", "c4.xlarge", "c4.2xlarge", "c4.4xlarge", "c4.8xlarge",
        "c3.large", "c3.xlarge", "c3.2xlarge", "c3.4xlarge", "c3.8xlarge",
        "r3.large", "r3.xlarge", "r3.2xlarge", "r3.4xlarge", "r3.8xlarge"
      ],
      "Default" : "m3.large"
    },
    "BDSInstances" : {
      "Description" : "Number of spatio-temporal Big Data Store EC2 instances",
      "Type" : "Number",
      "Default" : "0"
    },
    "KeyName" : {
      "Description" : "EC2 Key Pair to allow RemoteDesktop access to the instances",
      "Type" : "AWS::EC2::KeyPair::KeyName"
    },
    "ServerLicenseFile" : {
      "Description" : "ArcGIS for Server authorization file (must be uploaded to DeploymentBucket)",
      "Type" : "String",
      "AllowedPattern" : "[^\"]{1,1024}",
      "ConstraintDescription" : "S3 object key name must be between 1 and 1024 characters."
    },
    "PortalLicenseFile" : {
      "Description" : "Portal for ArcGIS authorization file (must be uploaded to DeploymentBucket)",
      "Type" : "String",
      "AllowedPattern" : "[^\"]{1,1024}",
      "ConstraintDescription" : "S3 object key name must be between 1 and 1024 characters."
    },
    "SiteAdmin" : {
      "Description" : "User name for ArcGIS Server site admin and Portal initial admin accounts",
      "Type" : "String",
      "Default" : "admin",
      "AllowedPattern" : "[0-9a-zA-Z.]{4,24}",
      "ConstraintDescription" : "User name must be between 4 and 24 characters and can only contain digits 0 through 9, ASCII letters A through Z (uppercase and lowercase), and a dot (.)."
    },
    "SiteAdminPassword" : {
      "Description" : "Password for ArcGIS Server site admin and Portal initial admin accounts",
      "Type" : "String",
      "NoEcho" : "true",
      "AllowedPattern" : "[0-9a-zA-Z.]{4,24}",
      "ConstraintDescription" : "Password must be between 4 and 24 characters and can only contain digits 0 through 9, ASCII letters A through Z (uppercase and lowercase), and a dot (.)."
    },
    "SiteDomain" : {
      "Description" : "The domain name of your Web GIS site",
      "Type" : "String",
      "AllowedPattern" : "[^\\\"]{1,253}",
      "ConstraintDescription" : "The domain name is invalid."
    },
    "SSLCertificateFile" : {
      "Description" : "SSL certificate file issued to the site domain (must be uploaded to DeploymentBucket)",
      "Type" : "String",
      "AllowedPattern" : "[^\"]{1,1024}",
      "ConstraintDescription" : "S3 object key name must be between 1 and 1024 characters."
    },
    "SSLCertPassword" : {
      "Description" : "SSL certificate file password",
      "Type" : "String",
      "NoEcho" : "true",
      "AllowedPattern" : "[^\\\"]{1,128}",
      "ConstraintDescription" : "Password must be between 1 and 128 characters and must not contain backslashes (\\) or quotation marks (\")."
    }
  },
  "Resources" : {
    "VPC" : {
      "Type" : "AWS::EC2::VPC",
      "Properties" : {
        "CidrBlock" : "10.0.0.0/16",
        "Tags" : [
          {
            "Key" : "Name",
            "Value" : {"Ref" : "AWS::StackName"}
          }, {
            "Key" : "Application",
            "Value" : {"Ref" : "AWS::StackName"}
          }, {
            "Key" : "Network",
            "Value" : "Public"
          }
        ]
      }
    },
    "Subnet1" : {
      "Type" : "AWS::EC2::Subnet",
      "Properties" : {
        "VpcId" : {"Ref" : "VPC"},
        "CidrBlock" : "10.0.0.0/24",
        "AvailabilityZone" : {"Fn::Select" : [0, {"Ref" : "AZs"}]},
        "Tags" : [
          {
            "Key" : "Name",
            "Value" : {"Fn::Join" : ["", [{"Ref" : "AWS::StackName"}, "-subnet1"]]}
          }, {
            "Key" : "Application",
            "Value" : {"Ref" : "AWS::StackName"}
          }, {
            "Key" : "Network",
            "Value" : "Public"
          }
        ]
      }
    },
    "Subnet2" : {
      "Type" : "AWS::EC2::Subnet",
      "Properties" : {
        "VpcId" : {"Ref" : "VPC"},
        "CidrBlock" : "10.0.1.0/24",
        "AvailabilityZone" : {"Fn::Select" : [1, {"Ref" : "AZs"}]},
        "Tags" : [
          {
            "Key" : "Name",
            "Value" : {"Fn::Join" : ["", [{"Ref" : "AWS::StackName"}, "-subnet2"]]}
          }, {
            "Key" : "Application",
            "Value" : {"Ref" : "AWS::StackName"}
          }, {
            "Key" : "Network",
            "Value" : "Public"
          }
        ]
      }
    },
    "InternetGateway" : {
      "Type" : "AWS::EC2::InternetGateway",
      "Properties" : {
        "Tags" : [
          {
            "Key" : "Application",
            "Value" : {"Ref" : "AWS::StackName"}
          }, {
            "Key" : "Network",
            "Value" : "Public"
          }
        ]
      }
    },
    "AttachGateway" : {
      "Type" : "AWS::EC2::VPCGatewayAttachment",
      "Properties" : {
        "VpcId" : {"Ref" : "VPC"},
        "InternetGatewayId" : {"Ref" : "InternetGateway"}
      }
    },
    "RouteTable" : {
      "Type" : "AWS::EC2::RouteTable",
      "Properties" : {
        "VpcId" : {"Ref" : "VPC"},
        "Tags" : [
          {
            "Key" : "Application",
            "Value" : {"Ref" : "AWS::StackName"}
          }, {
            "Key" : "Network",
            "Value" : "Public"
          }
        ]
      }
    },
    "Route" : {
      "Type" : "AWS::EC2::Route",
      "DependsOn" : "AttachGateway",
      "Properties" : {
        "RouteTableId" : {"Ref" : "RouteTable"},
        "DestinationCidrBlock" : "0.0.0.0/0",
        "GatewayId" : {"Ref" : "InternetGateway"}
      }
    },
    "Subnet1RouteTableAssociation" : {
      "Type" : "AWS::EC2::SubnetRouteTableAssociation",
      "Properties" : {
        "SubnetId" : {"Ref" : "Subnet1"},
        "RouteTableId" : {"Ref" : "RouteTable"}
      }
    },
    "Subnet2RouteTableAssociation" : {
      "Type" : "AWS::EC2::SubnetRouteTableAssociation",
      "Properties" : {
        "SubnetId" : {"Ref" : "Subnet2"},
        "RouteTableId" : {"Ref" : "RouteTable"}
      }
    },
    "SecurityGroup" : {
      "Type" : "AWS::EC2::SecurityGroup",
      "Properties" : {
        "GroupDescription" : {"Ref" : "AWS::StackName"},
        "VpcId" : {"Ref" : "VPC"},
        "SecurityGroupIngress" : [
          {
            "IpProtocol" : "tcp",
            "FromPort" : "80",
            "ToPort" : "80",
            "CidrIp" : "0.0.0.0/0"
          }, {
            "IpProtocol" : "tcp",
            "FromPort" : "443",
            "ToPort" : "443",
            "CidrIp" : "0.0.0.0/0"
          }
        ]
      }
    },
    "SecurityGroupIngress" : {
      "Type" : "AWS::EC2::SecurityGroupIngress",
      "Properties" : {
        "GroupId" : {"Ref" : "SecurityGroup"},
        "IpProtocol" : "tcp",
        "FromPort" : "0",
        "ToPort" : "65535",
        "SourceSecurityGroupId" : {"Ref" : "SecurityGroup"}
      }
    },
    "ELB" : {
      "Type" : "AWS::ElasticLoadBalancing::LoadBalancer",
      "DependsOn" : "AttachGateway",
      "Properties" : {
        "Subnets" : [{"Ref" : "Subnet1"}, {"Ref" : "Subnet2"}],
        "SecurityGroups" : [{"Ref" : "SecurityGroup"}],
        "Scheme" : "internet-facing",
        "Listeners" : [
          {
            "LoadBalancerPort" : "80",
            "InstancePort" : "80",
            "Protocol" : "HTTP"
          }, {
            "LoadBalancerPort" : "443",
            "InstancePort" : "443",
            "Protocol" : "TCP",
            "InstanceProtocol" : "TCP"
          }
        ],
        "HealthCheck" : {
          "Target" : "HTTP:80/server/rest/info/healthcheck",
          "HealthyThreshold" : "3",
          "UnhealthyThreshold" : "5",
          "Interval" : "30",
          "Timeout" : "5"
        },
        "Instances" : [{"Ref" : "PrimaryServerEC2Instance"}, {"Ref" : "SecondaryServerEC2Instance"}]
      }
    },
    "IAMRole" : {
      "Type" : "AWS::IAM::Role",
      "Properties" : {
        "AssumeRolePolicyDocument" : {
          "Statement" : [
            {
              "Effect" : "Allow",
              "Principal" : {
                "Service" : ["ec2.amazonaws.com"]
              },
              "Action" : ["sts:AssumeRole"]
            }
          ]
        },
        "Path" : "/"
      }
    },
    "IAMPolicy" : {
      "Type" : "AWS::IAM::Policy",
      "Properties" : {
        "PolicyName" : "IAMRole",
        "PolicyDocument" : {
          "Statement" : [
            {
              "Action" : ["s3:*", "cloudformation:*", "logs:*"],
              "Effect" : "Allow",
              "Resource" : "*"
            }
          ]
        },
        "Roles" : [
          {
            "Ref" : "IAMRole"
          }
        ]
      }
    },
    "IAMInstanceProfile" : {
      "Type" : "AWS::IAM::InstanceProfile",
      "Properties" : {
        "Path" : "/",
        "Roles" : [
          {
            "Ref" : "IAMRole"
          }
        ]
      }
    },
    "FileServerEC2Instance" : {
      "Type" : "AWS::EC2::Instance",
      "DependsOn" : "AttachGateway",
      "Properties" : {
        "ImageId" : {"Fn::FindInMap" : ["RegionMap", {"Ref" : "AWS::Region"}, "en"]},
        "InstanceType" : {"Ref" : "FSInstanceType"},
        "KeyName" : {"Ref" : "KeyName"},
        "IamInstanceProfile" : {"Ref" : "IAMInstanceProfile"},
        "Monitoring" : true,
        "BlockDeviceMappings" : [
          {
            "DeviceName" : "/dev/sda1",
            "Ebs" : {
              "VolumeSize" : {"Ref" : "DriveSizeRoot"},
              "DeleteOnTermination" : true,
              "VolumeType" : "gp2"
            }
          }, {
            "DeviceName" : "/dev/sdx",
            "Ebs" : {
              "VolumeSize" : {"Ref" : "DriveSizeData"},
              "DeleteOnTermination" : true,
              "VolumeType" : "gp2"
            }
          },
          {"DeviceName" : "xvdca", "NoDevice" : {}}, {"DeviceName" : "xvdcb", "NoDevice" : {}},
          {"DeviceName" : "xvdcc", "NoDevice" : {}}, {"DeviceName" : "xvdcd", "NoDevice" : {}},
          {"DeviceName" : "xvdce", "NoDevice" : {}}, {"DeviceName" : "xvdcf", "NoDevice" : {}},
          {"DeviceName" : "xvdcg", "NoDevice" : {}}, {"DeviceName" : "xvdch", "NoDevice" : {}},
          {"DeviceName" : "xvdci", "NoDevice" : {}}, {"DeviceName" : "xvdcj", "NoDevice" : {}},
          {"DeviceName" : "xvdck", "NoDevice" : {}}, {"DeviceName" : "xvdcl", "NoDevice" : {}},
          {"DeviceName" : "xvdcm", "NoDevice" : {}}, {"DeviceName" : "xvdcn", "NoDevice" : {}},
          {"DeviceName" : "xvdco", "NoDevice" : {}}, {"DeviceName" : "xvdcp", "NoDevice" : {}},
          {"DeviceName" : "xvdcq", "NoDevice" : {}}, {"DeviceName" : "xvdcr", "NoDevice" : {}},
          {"DeviceName" : "xvdcs", "NoDevice" : {}}, {"DeviceName" : "xvdct", "NoDevice" : {}},
          {"DeviceName" : "xvdcu", "NoDevice" : {}}, {"DeviceName" : "xvdcv", "NoDevice" : {}},
          {"DeviceName" : "xvdcw", "NoDevice" : {}}, {"DeviceName" : "xvdcx", "NoDevice" : {}},
          {"DeviceName" : "xvdcy", "NoDevice" : {}}, {"DeviceName" : "xvdcz", "NoDevice" : {}}
        ],
        "Tags" : [{"Key" : "Name", "Value" : {"Fn::Join" : ["", [{"Ref" : "AWS::StackName"}, "-fileserver"]]}}],
        "NetworkInterfaces" : [
          {
            "PrivateIpAddress" : "10.0.0.4",
            "GroupSet" : [{"Ref" : "SecurityGroup"}],
            "AssociatePublicIpAddress" : "true",
            "DeviceIndex" : "0",
            "DeleteOnTermination" : "true",
            "SubnetId" : {"Ref" : "Subnet1"}
          }
        ],
        "UserData" : {
          "Fn::Base64" : {
            "Fn::Join" : [
              "", [
                "#!/bin/bash -v\n",
                "cfn-init -v -s ", {"Ref" : "AWS::StackName"}, " -r FileServerEC2Instance", " --region ", {"Ref" : "AWS::Region"}, "\n",
                "exitcode=$?\n",
                "wget https://s3.amazonaws.com/aws-cloudwatch/downloads/latest/awslogs-agent-setup.py\n",
                "sudo python awslogs-agent-setup.py -n -r ", {"Ref" : "AWS::Region"},
                " -c /tmp/cwlogs/cwlogs.conf || error_exit 'Failed to run CloudWatch Logs agent setup'\n",
                "if [ $exitcode -ne 0 ]; then\n",
                "  sleep 60\n",
                "  cfn-signal -e $exitcode -r 'cfn-init failed. See CloudWatch log group ", {"Ref" : "DeploymentLogs"}, " for details.' '",
                {"Ref" : "FileServerWaitHandle"}, "'\n",
                "  exit $exitcode\n",
                "fi\n",
                "chmod 777 /mnt\n",
                "export arcgis_cloud_platform=aws\n",
                "chef-solo -j /tmp/node.json -r https://arcgisstore1041.s3.amazonaws.com/5686/cookbooks/arcgis-2.2.1-cookbooks.tar.gz -L /var/log/chef-run.log -l info\n",
                "exitcode=$?\n",
                "if [ $exitcode -ne 0 ]; then\n",
                "  sleep 60\n",
                "  cfn-signal -e $exitcode -r 'Chef run failed. See CloudWatch log group ",
                {"Ref" : "DeploymentLogs"}, " for details.' '", {"Ref" : "FileServerWaitHandle"}, "'\n",
                "  exit $exitcode\n",
                "fi\n",
                "cfn-signal -e 0 -r 'Setup complete' '", {"Ref" : "FileServerWaitHandle"}, "'\n"
              ]
            ]
          }
        }
      },
      "Metadata" : {
        "AWS::CloudFormation::Authentication" : {
          "S3AccessCreds" : {
            "type" : "S3",
            "buckets" : [{"Ref" : "DeploymentBucket"}],
            "roleName" : {"Ref" : "IAMRole"}
          }
        },
        "AWS::CloudFormation::Init" : {
          "config" : {
            "commands" : {
              "rename-server-license" : {
                "command" : {"Fn::Join" : ["", ["mv /tmp/server_license.tmp /tmp/", {"Ref" : "ServerLicenseFile"}]]}
              }
            },
            "files" : {
              "/tmp/cwlogs/cwlogs.conf" : {
                "content" : {
                  "Fn::Join" : [
                    "", [
                      "[general]\n",
                      "state_file= /var/awslogs/agent-state\n",
                      "[/var/log/cfn-init.log]\n",
                      "file = /var/log/cfn-init.log\n",
                      "log_group_name = ", {"Ref" : "DeploymentLogs"}, "\n",
                      "log_stream_name = {instance_id}/cfn-init.log\n",
                      "datetime_format = %d/%b/%Y:%H:%M:%S\n",
                      "[/var/log/chef-run.log]\n",
                      "file = /var/log/chef-run.log\n",
                      "log_group_name = ", {"Ref" : "DeploymentLogs"}, "\n",
                      "log_stream_name = {instance_id}/chef-run.log\n",
                      "datetime_format = %Y-%m-%dT%H:%M:%S%z\n",
                      "[/var/lib/tomcat7/logs/catalina.out]\n",
                      "file = /var/lib/tomcat7/logs/catalina.out\n",
                      "log_group_name = ", {"Ref" : "DeploymentLogs"}, "\n",
                      "log_stream_name = {instance_id}/catalina.out\n",
                      "datetime_format = %d/%b/%Y:%H:%M:%S"
                    ]
                  ]
                },
                "mode" : "000755"
              },
              "/tmp/server_license.tmp" : {
                "source" : {"Fn::Join" : ["", ["https://", {"Ref" : "DeploymentBucket"}, ".s3.amazonaws.com/", {"Ref" : "ServerLicenseFile"}]]},
                "authentication" : "S3AccessCreds",
                "mode" : "000755"
              },
              "/tmp/node.json" : {
                "content" : {
                  "Fn::Join" : [
                    "", [
                      "{\n",
                      "  \"arcgis\" : {\n",
                      "    \"version\" : \"10.4.1\",\n",
                      "    \"server\" : {\n",
                      "      \"local_directories_root\" : \"/gisdata/arcgisserver\",\n",
                      "      \"directories_root\" : \"/net/10.0.0.4/gisdata/arcgisserver\"\n",
                      "    },\n",
                      "    \"data_store\" : {\n",
                      "      \"local_backup_dir\" : \"/gisdata/arcgisdatastore/backup\",\n",
                      "      \"backup_dir\" : \"/net/10.0.0.4/gisdata/arcgisdatastore/backup\"\n",
                      "    },\n",
                      "    \"portal\" : {\n",
                      "      \"local_content_dir\" : \"/gisdata/arcgisportal/content\",\n",
                      "      \"content_dir\" : \"/net/10.0.0.4/gisdata/arcgisportal/content\"\n",
                      "    }\n",
                      "  },\n",
                      "  \"run_list\" : [\n",
                      "    \"recipe[arcgis::system]\",\n",
                      "    \"recipe[arcgis::fileserver]\"]\n",
                      "}\n"
                    ]
                  ]
                },
                "mode" : "000755"
              }
            }
          }
        }
      }
    },
    "FileServerRecoveryAlarm" : {
      "Type" : "AWS::CloudWatch::Alarm",
      "Properties" : {
        "AlarmDescription" : "Trigger a recovery when instance status check fails for 5 consecutive minutes.",
        "MetricName" : "StatusCheckFailed_System",
        "Namespace" : "AWS/EC2",
        "Statistic" : "Minimum",
        "Period" : "60",
        "EvaluationPeriods" : "5",
        "Threshold" : "0",
        "ComparisonOperator" : "GreaterThanThreshold",
        "AlarmActions" : [{"Fn::Join" : ["", ["arn:aws:automate:", {"Ref" : "AWS::Region"}, ":ec2:recover"]]}],
        "Dimensions" : [
          {
            "Name" : "InstanceId",
            "Value" : {"Ref" : "FileServerEC2Instance"}
          }
        ]
      }
    },
    "FileServerWaitHandle" : {
      "Type" : "AWS::CloudFormation::WaitConditionHandle",
      "Properties" : {}
    },
    "FileServerWaitCondition" : {
      "Type" : "AWS::CloudFormation::WaitCondition",
      "Properties" : {
        "Count" : "1",
        "Handle" : {"Ref" : "FileServerWaitHandle"},
        "Timeout" : "7200"
      }
    },
    "PrimaryServerEC2Instance" : {
      "Type" : "AWS::EC2::Instance",
      "DependsOn" : "FileServerWaitCondition",
      "Properties" : {
        "ImageId" : {"Fn::FindInMap" : ["RegionMap", {"Ref" : "AWS::Region"}, "en"]},
        "InstanceType" : {"Ref" : "ASInstanceType"},
        "KeyName" : {"Ref" : "KeyName"},
        "IamInstanceProfile" : {"Ref" : "IAMInstanceProfile"},
        "Monitoring" : true,
        "BlockDeviceMappings" : [
          {
            "DeviceName" : "/dev/sda1",
            "Ebs" : {
              "VolumeSize" : {"Ref" : "DriveSizeRoot"},
              "DeleteOnTermination" : true,
              "VolumeType" : "gp2"
            }
          }, {
            "DeviceName" : "/dev/sdx",
            "Ebs" : {
              "VolumeSize" : {"Ref" : "DriveSizeData"},
              "DeleteOnTermination" : true,
              "VolumeType" : "gp2"
            }
          },
          {"DeviceName" : "xvdca", "NoDevice" : {}}, {"DeviceName" : "xvdcb", "NoDevice" : {}},
          {"DeviceName" : "xvdcc", "NoDevice" : {}}, {"DeviceName" : "xvdcd", "NoDevice" : {}},
          {"DeviceName" : "xvdce", "NoDevice" : {}}, {"DeviceName" : "xvdcf", "NoDevice" : {}},
          {"DeviceName" : "xvdcg", "NoDevice" : {}}, {"DeviceName" : "xvdch", "NoDevice" : {}},
          {"DeviceName" : "xvdci", "NoDevice" : {}}, {"DeviceName" : "xvdcj", "NoDevice" : {}},
          {"DeviceName" : "xvdck", "NoDevice" : {}}, {"DeviceName" : "xvdcl", "NoDevice" : {}},
          {"DeviceName" : "xvdcm", "NoDevice" : {}}, {"DeviceName" : "xvdcn", "NoDevice" : {}},
          {"DeviceName" : "xvdco", "NoDevice" : {}}, {"DeviceName" : "xvdcp", "NoDevice" : {}},
          {"DeviceName" : "xvdcq", "NoDevice" : {}}, {"DeviceName" : "xvdcr", "NoDevice" : {}},
          {"DeviceName" : "xvdcs", "NoDevice" : {}}, {"DeviceName" : "xvdct", "NoDevice" : {}},
          {"DeviceName" : "xvdcu", "NoDevice" : {}}, {"DeviceName" : "xvdcv", "NoDevice" : {}},
          {"DeviceName" : "xvdcw", "NoDevice" : {}}, {"DeviceName" : "xvdcx", "NoDevice" : {}},
          {"DeviceName" : "xvdcy", "NoDevice" : {}}, {"DeviceName" : "xvdcz", "NoDevice" : {}}
        ],
        "Tags" : [{"Key" : "Name", "Value" : {"Fn::Join" : ["", [{"Ref" : "AWS::StackName"}, "-primary"]]}}],
        "NetworkInterfaces" : [
          {
            "PrivateIpAddress" : "10.0.0.5",
            "GroupSet" : [{"Ref" : "SecurityGroup"}],
            "AssociatePublicIpAddress" : "true",
            "DeviceIndex" : "0",
            "DeleteOnTermination" : "true",
            "SubnetId" : {"Ref" : "Subnet1"}
          }
        ],
        "UserData" : {
          "Fn::Base64" : {
            "Fn::Join" : [
              "", [
                "#!/bin/bash -v\n",
                "cfn-init -v -s ", {"Ref" : "AWS::StackName"}, " -r PrimaryServerEC2Instance", " --region ", {"Ref" : "AWS::Region"}, "\n",
                "exitcode=$?\n",
                "wget https://s3.amazonaws.com/aws-cloudwatch/downloads/latest/awslogs-agent-setup.py\n",
                "sudo python awslogs-agent-setup.py -n -r ", {"Ref" : "AWS::Region"},
                " -c /tmp/cwlogs/cwlogs.conf || error_exit 'Failed to run CloudWatch Logs agent setup'\n",
                "if [ $exitcode -ne 0 ]; then\n",
                "  sleep 60\n",
                "  cfn-signal -e $exitcode -r 'cfn-init failed. See CloudWatch log group ", {"Ref" : "DeploymentLogs"}, " for details.' '",
                {"Ref" : "PrimaryServerWaitHandle"}, "'\n",
                "  exit $exitcode\n",
                "fi\n",
                "chmod 777 /mnt\n",
                "export arcgis_cloud_platform=aws\n",
                "chef-solo -j /tmp/node.json -r https://arcgisstore1041.s3.amazonaws.com/5686/cookbooks/arcgis-2.2.1-cookbooks.tar.gz -L /var/log/chef-run.log -l info\n",
                "exitcode=$?\n",
                "if [ $exitcode -ne 0 ]; then\n",
                "  sleep 60\n",
                "  cfn-signal -e $exitcode -r 'Chef run failed. See CloudWatch log group ",
                {"Ref" : "DeploymentLogs"}, " for details.' '", {"Ref" : "PrimaryServerWaitHandle"}, "'\n",
                "  exit $exitcode\n",
                "fi\n",
                "cfn-signal -e 0 -r 'Setup complete' '", {"Ref" : "PrimaryServerWaitHandle"}, "'\n"
              ]
            ]
          }
        }
      },
      "Metadata" : {
        "AWS::CloudFormation::Authentication" : {
          "S3AccessCreds" : {
            "type" : "S3",
            "buckets" : [{"Ref" : "DeploymentBucket"}],
            "roleName" : {"Ref" : "IAMRole"}
          }
        },
        "AWS::CloudFormation::Init" : {
          "config" : {
            "commands" : {
              "rename-server-license" : {
                "command" : {"Fn::Join" : ["", ["mv /tmp/server_license.tmp /tmp/", {"Ref" : "ServerLicenseFile"}]]}
              },
              "rename-portal-license" : {
                "command" : {"Fn::Join" : ["", ["mv /tmp/portal_license.tmp /tmp/", {"Ref" : "PortalLicenseFile"}]]}
              }
            },
            "files" : {
              "/tmp/cwlogs/cwlogs.conf" : {
                "content" : {
                  "Fn::Join" : [
                    "", [
                      "[general]\n",
                      "state_file= /var/awslogs/agent-state\n",
                      "[/var/log/cfn-init.log]\n",
                      "file = /var/log/cfn-init.log\n",
                      "log_group_name = ", {"Ref" : "DeploymentLogs"}, "\n",
                      "log_stream_name = {instance_id}/cfn-init.log\n",
                      "datetime_format = %d/%b/%Y:%H:%M:%S\n",
                      "[/var/log/chef-run.log]\n",
                      "file = /var/log/chef-run.log\n",
                      "log_group_name = ", {"Ref" : "DeploymentLogs"}, "\n",
                      "log_stream_name = {instance_id}/chef-run.log\n",
                      "datetime_format = %Y-%m-%dT%H:%M:%S%z\n",
                      "[/var/lib/tomcat7/logs/catalina.out]\n",
                      "file = /var/lib/tomcat7/logs/catalina.out\n",
                      "log_group_name = ", {"Ref" : "DeploymentLogs"}, "\n",
                      "log_stream_name = {instance_id}/catalina.out\n",
                      "datetime_format = %d/%b/%Y:%H:%M:%S"
                    ]
                  ]
                },
                "mode" : "000755"
              },
              "/tmp/server_license.tmp" : {
                "source" : {"Fn::Join" : ["", ["https://", {"Ref" : "DeploymentBucket"}, ".s3.amazonaws.com/", {"Ref" : "ServerLicenseFile"}]]},
                "authentication" : "S3AccessCreds",
                "mode" : "000755"
              },
              "/tmp/portal_license.tmp" : {
                "source" : {"Fn::Join" : ["", ["https://", {"Ref" : "DeploymentBucket"}, ".s3.amazonaws.com/", {"Ref" : "PortalLicenseFile"}]]},
                "authentication" : "S3AccessCreds",
                "mode" : "000755"
              },
              "/etc/tomcat7/pkcs12_cert.pfx" : {
                "source" : {"Fn::Join" : ["", ["https://", {"Ref" : "DeploymentBucket"}, ".s3.amazonaws.com/", {"Ref" : "SSLCertificateFile"}]]},
                "authentication" : "S3AccessCreds",
                "mode" : "000755"
              },
              "/tmp/node.json" : {
                "content" : {
                  "Fn::Join" : [
                    "", [
                      "{\n",
                      "  \"java\" : {\n",
                      "    \"install_flavor\" : \"oracle\",\n",
                      "    \"jdk_version\" : \"7\",\n",
                      "    \"oracle\" : {\n",
                      "      \"accept_oracle_download_terms\" : true\n",
                      "    }\n",
                      "  },\n",
                      "  \"tomcat\" : {\n",
                      "    \"base_version\" : 7,\n",
                      "    \"port\" : 80,\n",
                      "    \"ssl_port\" : 443,\n",
                      "    \"authbind\" : \"yes\",\n",
                      "    \"keystore_file\" : \"pkcs12_cert.pfx\",\n",
                      "    \"keystore_type\" : \"pkcs12\",\n",
                      "    \"keystore_password\" : \"", {"Ref" : "SSLCertPassword"}, "\"\n",
                      "  },\n",
                      "  \"arcgis\" : {\n",
                      "    \"version\" : \"10.4.1\",\n",
                      "    \"hosts\" : {\n",
                      "      \"", {"Ref" : "SiteDomain"}, "\" : \"10.0.0.5\"\n",
                      "    },\n",
                      "    \"server\" : {\n",
                      "      \"keystore_file\" : \"/etc/tomcat7/pkcs12_cert.pfx\",\n",
                      "      \"keystore_password\" : \"", {"Ref" : "SSLCertPassword"}, "\",\n",
                      "      \"domain_name\" : \"", {"Ref" : "SiteDomain"}, "\",\n",
                      "      \"admin_username\" : \"", {"Ref" : "SiteAdmin"}, "\",\n",
                      "      \"admin_password\" : \"", {"Ref" : "SiteAdminPassword"}, "\",\n",
                      "      \"authorization_file\" : \"/tmp/", {"Ref" : "ServerLicenseFile"}, "\",\n",
                      "      \"directories_root\" : \"/net/10.0.0.4/gisdata/arcgisserver\"\n",
                      "    },\n",
                      "    \"data_store\" : {\n",
                      "      \"preferredidentifier\" : \"ip\",\n",
                      "      \"data_dir\" : \"/gisdata/arcgisdatastore\",\n",
                      "      \"backup_dir\" : \"/net/10.0.0.4/gisdata/arcgisdatastore/backup\"\n",
                      "    },\n",
                      "    \"portal\" : {\n",
                      "      \"domain_name\" : \"", {"Ref" : "SiteDomain"}, "\",\n",
                      "      \"private_url\" : \"https://", {"Ref" : "SiteDomain"}, "/portal\",\n",
                      "      \"web_context_url\" : \"https://", {"Ref" : "SiteDomain"}, "/portal\",\n",
                      "      \"admin_username\" : \"", {"Ref" : "SiteAdmin"}, "\",\n",
                      "      \"admin_password\" : \"", {"Ref" : "SiteAdminPassword"}, "\",\n",
                      "      \"data_dir\" : \"/gisdata/arcgisportal\",\n",
                      "      \"content_dir\" : \"/net/10.0.0.4/gisdata/arcgisportal/content\",\n",
                      "      \"authorization_file\" : \"/tmp/", {"Ref" : "PortalLicenseFile"}, "\"\n",
                      "    },\n",
                      "    \"web_adaptor\" : {\n",
                      "      \"admin_access\" : true\n",
                      "    }\n",
                      "  },\n",
                      "  \"run_list\" : [\n",
                      "    \"recipe[apt]\",\n",
                      "    \"recipe[arcgis::system]\",\n",
                      "    \"recipe[java]\",\n",
                      "    \"recipe[arcgis::authbind]\",\n",
                      "    \"recipe[tomcat]\",\n",
                      "    \"recipe[arcgis::server]\",\n",
                      "    \"recipe[arcgis::server_wa]\",\n",
                      "    \"recipe[arcgis::datastore]\",\n",
                      "    \"recipe[arcgis::portal]\",\n",
                      "    \"recipe[arcgis::portal_wa]\"]\n",
                      "}\n"
                    ]
                  ]
                },
                "mode" : "000755"
              }
            }
          }
        }
      }
    },
    "PrimaryServerRecoveryAlarm" : {
      "Type" : "AWS::CloudWatch::Alarm",
      "Properties" : {
        "AlarmDescription" : "Trigger a recovery when instance status check fails for 5 consecutive minutes.",
        "MetricName" : "StatusCheckFailed_System",
        "Namespace" : "AWS/EC2",
        "Statistic" : "Minimum",
        "Period" : "60",
        "EvaluationPeriods" : "5",
        "Threshold" : "0",
        "ComparisonOperator" : "GreaterThanThreshold",
        "AlarmActions" : [{"Fn::Join" : ["", ["arn:aws:automate:", {"Ref" : "AWS::Region"}, ":ec2:recover"]]}],
        "Dimensions" : [
          {
            "Name" : "InstanceId",
            "Value" : {"Ref" : "PrimaryServerEC2Instance"}
          }
        ]
      }
    },
    "PrimaryServerWaitHandle" : {
      "Type" : "AWS::CloudFormation::WaitConditionHandle",
      "Properties" : {}
    },
    "PrimaryServerWaitCondition" : {
      "Type" : "AWS::CloudFormation::WaitCondition",
      "Properties" : {
        "Count" : "1",
        "Handle" : {"Ref" : "PrimaryServerWaitHandle"},
        "Timeout" : "7200"
      }
    },
    "SecondaryServerEC2Instance" : {
      "Type" : "AWS::EC2::Instance",
      "DependsOn" : "PrimaryServerWaitCondition",
      "Properties" : {
        "ImageId" : {"Fn::FindInMap" : ["RegionMap", {"Ref" : "AWS::Region"}, "en"]},
        "InstanceType" : {"Ref" : "ASInstanceType"},
        "KeyName" : {"Ref" : "KeyName"},
        "IamInstanceProfile" : {"Ref" : "IAMInstanceProfile"},
        "Monitoring" : true,
        "BlockDeviceMappings" : [
          {
            "DeviceName" : "/dev/sda1",
            "Ebs" : {
              "VolumeSize" : {"Ref" : "DriveSizeRoot"},
              "DeleteOnTermination" : true,
              "VolumeType" : "gp2"
            }
          }, {
            "DeviceName" : "/dev/sdx",
            "Ebs" : {
              "VolumeSize" : {"Ref" : "DriveSizeData"},
              "DeleteOnTermination" : true,
              "VolumeType" : "gp2"
            }
          },
          {"DeviceName" : "xvdca", "NoDevice" : {}}, {"DeviceName" : "xvdcb", "NoDevice" : {}},
          {"DeviceName" : "xvdcc", "NoDevice" : {}}, {"DeviceName" : "xvdcd", "NoDevice" : {}},
          {"DeviceName" : "xvdce", "NoDevice" : {}}, {"DeviceName" : "xvdcf", "NoDevice" : {}},
          {"DeviceName" : "xvdcg", "NoDevice" : {}}, {"DeviceName" : "xvdch", "NoDevice" : {}},
          {"DeviceName" : "xvdci", "NoDevice" : {}}, {"DeviceName" : "xvdcj", "NoDevice" : {}},
          {"DeviceName" : "xvdck", "NoDevice" : {}}, {"DeviceName" : "xvdcl", "NoDevice" : {}},
          {"DeviceName" : "xvdcm", "NoDevice" : {}}, {"DeviceName" : "xvdcn", "NoDevice" : {}},
          {"DeviceName" : "xvdco", "NoDevice" : {}}, {"DeviceName" : "xvdcp", "NoDevice" : {}},
          {"DeviceName" : "xvdcq", "NoDevice" : {}}, {"DeviceName" : "xvdcr", "NoDevice" : {}},
          {"DeviceName" : "xvdcs", "NoDevice" : {}}, {"DeviceName" : "xvdct", "NoDevice" : {}},
          {"DeviceName" : "xvdcu", "NoDevice" : {}}, {"DeviceName" : "xvdcv", "NoDevice" : {}},
          {"DeviceName" : "xvdcw", "NoDevice" : {}}, {"DeviceName" : "xvdcx", "NoDevice" : {}},
          {"DeviceName" : "xvdcy", "NoDevice" : {}}, {"DeviceName" : "xvdcz", "NoDevice" : {}}
        ],
        "Tags" : [{"Key" : "Name", "Value" : {"Fn::Join" : ["", [{"Ref" : "AWS::StackName"}, "-secondary"]]}}],
        "NetworkInterfaces" : [
          {
            "PrivateIpAddress" : "10.0.1.5",
            "GroupSet" : [{"Ref" : "SecurityGroup"}],
            "AssociatePublicIpAddress" : "true",
            "DeviceIndex" : "0",
            "DeleteOnTermination" : "true",
            "SubnetId" : {"Ref" : "Subnet2"}
          }
        ],
        "UserData" : {
          "Fn::Base64" : {
            "Fn::Join" : [
              "", [
                "#!/bin/bash -v\n",
                "cfn-init -v -s ", {"Ref" : "AWS::StackName"}, " -r SecondaryServerEC2Instance", " --region ", {"Ref" : "AWS::Region"}, "\n",
                "exitcode=$?\n",
                "wget https://s3.amazonaws.com/aws-cloudwatch/downloads/latest/awslogs-agent-setup.py\n",
                "sudo python awslogs-agent-setup.py -n -r ", {"Ref" : "AWS::Region"},
                " -c /tmp/cwlogs/cwlogs.conf || error_exit 'Failed to run CloudWatch Logs agent setup'\n",
                "if [ $exitcode -ne 0 ]; then\n",
                "  sleep 60\n",
                "  cfn-signal -e $exitcode -r 'cfn-init failed. See CloudWatch log group ", {"Ref" : "DeploymentLogs"}, " for details.' '",
                {"Ref" : "SecondaryServerWaitHandle"}, "'\n",
                "  exit $exitcode\n",
                "fi\n",
                "chmod 777 /mnt\n",
                "export arcgis_cloud_platform=aws\n",
                "chef-solo -j /tmp/node.json -r https://arcgisstore1041.s3.amazonaws.com/5686/cookbooks/arcgis-2.2.1-cookbooks.tar.gz -L /var/log/chef-run.log -l info\n",
                "exitcode=$?\n",
                "if [ $exitcode -ne 0 ]; then\n",
                "  sleep 60\n",
                "  cfn-signal -e $exitcode -r 'Chef run failed. See CloudWatch log group ",
                {"Ref" : "DeploymentLogs"}, " for details.' '", {"Ref" : "SecondaryServerWaitHandle"}, "'\n",
                "  exit $exitcode\n",
                "fi\n",
                "cfn-signal -e 0 -r 'Setup complete' '", {"Ref" : "SecondaryServerWaitHandle"}, "'\n"
              ]
            ]
          }
        }
      },
      "Metadata" : {
        "AWS::CloudFormation::Authentication" : {
          "S3AccessCreds" : {
            "type" : "S3",
            "buckets" : [{"Ref" : "DeploymentBucket"}],
            "roleName" : {"Ref" : "IAMRole"}
          }
        },
        "AWS::CloudFormation::Init" : {
          "config" : {
            "commands" : {
              "rename-server-license" : {
                "command" : {"Fn::Join" : ["", ["mv /tmp/server_license.tmp /tmp/", {"Ref" : "ServerLicenseFile"}]]}
              },
              "rename-portal-license" : {
                "command" : {"Fn::Join" : ["", ["mv /tmp/portal_license.tmp /tmp/", {"Ref" : "PortalLicenseFile"}]]}
              }
            },
            "files" : {
              "/tmp/cwlogs/cwlogs.conf" : {
                "content" : {
                  "Fn::Join" : [
                    "", [
                      "[general]\n",
                      "state_file= /var/awslogs/agent-state\n",
                      "[/var/log/cfn-init.log]\n",
                      "file = /var/log/cfn-init.log\n",
                      "log_group_name = ", {"Ref" : "DeploymentLogs"}, "\n",
                      "log_stream_name = {instance_id}/cfn-init.log\n",
                      "datetime_format = %d/%b/%Y:%H:%M:%S\n",
                      "[/var/log/chef-run.log]\n",
                      "file = /var/log/chef-run.log\n",
                      "log_group_name = ", {"Ref" : "DeploymentLogs"}, "\n",
                      "log_stream_name = {instance_id}/chef-run.log\n",
                      "datetime_format = %Y-%m-%dT%H:%M:%S%z\n",
                      "[/var/lib/tomcat7/logs/catalina.out]\n",
                      "file = /var/lib/tomcat7/logs/catalina.out\n",
                      "log_group_name = ", {"Ref" : "DeploymentLogs"}, "\n",
                      "log_stream_name = {instance_id}/catalina.out\n",
                      "datetime_format = %d/%b/%Y:%H:%M:%S"
                    ]
                  ]
                },
                "mode" : "000755"
              },
              "/tmp/server_license.tmp" : {
                "source" : {"Fn::Join" : ["", ["https://", {"Ref" : "DeploymentBucket"}, ".s3.amazonaws.com/", {"Ref" : "ServerLicenseFile"}]]},
                "authentication" : "S3AccessCreds",
                "mode" : "000755"
              },
              "/tmp/portal_license.tmp" : {
                "source" : {"Fn::Join" : ["", ["https://", {"Ref" : "DeploymentBucket"}, ".s3.amazonaws.com/", {"Ref" : "PortalLicenseFile"}]]},
                "authentication" : "S3AccessCreds",
                "mode" : "000755"
              },
              "/etc/tomcat7/pkcs12_cert.pfx" : {
                "source" : {"Fn::Join" : ["", ["https://", {"Ref" : "DeploymentBucket"}, ".s3.amazonaws.com/", {"Ref" : "SSLCertificateFile"}]]},
                "authentication" : "S3AccessCreds",
                "mode" : "000755"
              },
              "/tmp/node.json" : {
                "content" : {
                  "Fn::Join" : [
                    "", [
                      "{\n",
                      "  \"java\" : {\n",
                      "    \"install_flavor\" : \"oracle\",\n",
                      "    \"jdk_version\" : \"7\",\n",
                      "    \"oracle\" : {\n",
                      "      \"accept_oracle_download_terms\" : true\n",
                      "    }\n",
                      "  },\n",
                      "  \"tomcat\" : {\n",
                      "    \"base_version\" : 7,\n",
                      "    \"port\" : 80,\n",
                      "    \"ssl_port\" : 443,\n",
                      "    \"authbind\" : \"yes\",\n",
                      "    \"keystore_file\" : \"pkcs12_cert.pfx\",\n",
                      "    \"keystore_type\" : \"pkcs12\",\n",
                      "    \"keystore_password\" : \"", {"Ref" : "SSLCertPassword"}, "\"\n",
                      "  },\n",
                      "  \"arcgis\" : {\n",
                      "    \"version\" : \"10.4.1\",\n",
                      "    \"hosts\" : {\n",
                      "      \"", {"Ref" : "SiteDomain"}, "\" : \"10.0.1.5\"\n",
                      "    },\n",
                      "    \"server\" : {\n",
                      "      \"keystore_file\" : \"/etc/tomcat7/pkcs12_cert.pfx\",\n",
                      "      \"keystore_password\" : \"", {"Ref" : "SSLCertPassword"}, "\",\n",
                      "      \"domain_name\" : \"", {"Ref" : "SiteDomain"}, "\",\n",
                      "      \"admin_username\" : \"", {"Ref" : "SiteAdmin"}, "\",\n",
                      "      \"admin_password\" : \"", {"Ref" : "SiteAdminPassword"}, "\",\n",
                      "      \"primary_server_url\" : \"http://10.0.0.5:6080/arcgis\",\n",
                      "      \"authorization_file\" : \"/tmp/", {"Ref" : "ServerLicenseFile"}, "\"\n",
                      "    },\n",
                      "    \"data_store\" : {\n",
                      "      \"preferredidentifier\" : \"ip\",\n",
                      "      \"data_dir\" : \"/gisdata/arcgisdatastore\",\n",
                      "      \"backup_dir\" : \"/net/10.0.0.4/gisdata/arcgisdatastore/backup\"\n",
                      "    },\n",
                      "    \"portal\" : {\n",
                      "      \"domain_name\" : \"", {"Ref" : "SiteDomain"}, "\",\n",
                      "      \"primary_machine_url\" : \"https://10.0.0.5:7443\",\n",
                      "      \"private_url\" : \"https://", {"Ref" : "SiteDomain"}, "/portal\",\n",
                      "      \"admin_username\" : \"", {"Ref" : "SiteAdmin"}, "\",\n",
                      "      \"admin_password\" : \"", {"Ref" : "SiteAdminPassword"}, "\",\n",
                      "      \"authorization_file\" : \"/tmp/", {"Ref" : "PortalLicenseFile"}, "\"\n",
                      "    },\n",
                      "    \"web_adaptor\" : {\n",
                      "      \"admin_access\" : true\n",
                      "    }\n",
                      "  },\n",
                      "  \"run_list\" : [\n",
                      "    \"recipe[apt]\",\n",
                      "    \"recipe[arcgis::system]\",\n",
                      "    \"recipe[java]\",\n",
                      "    \"recipe[arcgis::authbind]\",\n",
                      "    \"recipe[tomcat]\",\n",
                      "    \"recipe[arcgis::server_node]\",\n",
                      "    \"recipe[arcgis::server_wa]\",\n",
                      "    \"recipe[arcgis::datastore_standby]\",\n",
                      "    \"recipe[arcgis::portal_standby]\",\n",
                      "    \"recipe[arcgis::portal_wa]\",\n",
                      "    \"recipe[arcgis::federation]\"]\n",
                      "}\n"
                    ]
                  ]
                },
                "mode" : "000755"
              }
            }
          }
        }
      }
    },
    "SecondaryServerRecoveryAlarm" : {
      "Type" : "AWS::CloudWatch::Alarm",
      "Properties" : {
        "AlarmDescription" : "Trigger a recovery when instance status check fails for 5 consecutive minutes.",
        "MetricName" : "StatusCheckFailed_System",
        "Namespace" : "AWS/EC2",
        "Statistic" : "Minimum",
        "Period" : "60",
        "EvaluationPeriods" : "5",
        "Threshold" : "0",
        "ComparisonOperator" : "GreaterThanThreshold",
        "AlarmActions" : [{"Fn::Join" : ["", ["arn:aws:automate:", {"Ref" : "AWS::Region"}, ":ec2:recover"]]}],
        "Dimensions" : [
          {
            "Name" : "InstanceId",
            "Value" : {"Ref" : "SecondaryServerEC2Instance"}
          }
        ]
      }
    },
    "SecondaryServerWaitHandle" : {
      "Type" : "AWS::CloudFormation::WaitConditionHandle",
      "Properties" : {}
    },
    "SecondaryServerWaitCondition" : {
      "Type" : "AWS::CloudFormation::WaitCondition",
      "Properties" : {
        "Count" : "1",
        "Handle" : {"Ref" : "SecondaryServerWaitHandle"},
        "Timeout" : "7200"
      }
    },
    "LaunchConfig" : {
      "Type" : "AWS::AutoScaling::LaunchConfiguration",
      "DependsOn" : "SecondaryServerWaitCondition",
      "Properties" : {
        "AssociatePublicIpAddress" : true,
        "ImageId" : {"Fn::FindInMap" : ["RegionMap", {"Ref" : "AWS::Region"}, "en"]},
        "InstanceType" : {"Ref" : "BDSInstanceType"},
        "KeyName" : {"Ref" : "KeyName"},
        "IamInstanceProfile" : {"Ref" : "IAMInstanceProfile"},
        "SecurityGroups" : [{"Ref" : "SecurityGroup"}],
        "InstanceMonitoring" : true,
        "BlockDeviceMappings" : [
          {
            "DeviceName" : "/dev/sda1",
            "Ebs" : {
              "VolumeSize" : {"Ref" : "DriveSizeRoot"},
              "DeleteOnTermination" : true,
              "VolumeType" : "gp2"
            }
          }, {
            "DeviceName" : "/dev/sdx",
            "Ebs" : {
              "VolumeSize" : {"Ref" : "DriveSizeData"},
              "DeleteOnTermination" : true,
              "VolumeType" : "gp2"
            }
          }
        ],
        "UserData" : {
          "Fn::Base64" : {
            "Fn::Join" : [
              "", [
                "#!/bin/bash -v\n",
                "cfn-init -v -s ", {"Ref" : "AWS::StackName"}, " -r LaunchConfig", " --region ", {"Ref" : "AWS::Region"}, "\n",
                "exitcode=$?\n",
                "wget https://s3.amazonaws.com/aws-cloudwatch/downloads/latest/awslogs-agent-setup.py\n",
                "sudo python awslogs-agent-setup.py -n -r ", {"Ref" : "AWS::Region"},
                " -c /tmp/cwlogs/cwlogs.conf || error_exit 'Failed to run CloudWatch Logs agent setup'\n",
                "if [ $exitcode -ne 0 ]; then\n",
                "  sleep 60\n",
                "  cfn-signal -e $exitcode -r 'cfn-init failed. See CloudWatch log group ", {"Ref" : "DeploymentLogs"}, " for details.' '",
                {"Ref" : "AutoScalingGroupWaitHandle"}, "'\n",
                "  exit $exitcode\n",
                "fi\n",
                "chmod 777 /mnt\n",
                "export arcgis_cloud_platform=aws\n",
                "chef-solo -j /tmp/node.json -r https://arcgisstore1041.s3.amazonaws.com/5686/cookbooks/arcgis-2.2.1-cookbooks.tar.gz -L /var/log/chef-run.log -l info\n",
                "exitcode=$?\n",
                "if [ $exitcode -ne 0 ]; then\n",
                "  sleep 60\n",
                "  cfn-signal -e $exitcode -r 'Chef run failed. See CloudWatch log group ",
                {"Ref" : "DeploymentLogs"}, " for details.' '", {"Ref" : "AutoScalingGroupWaitHandle"}, "'\n",
                "  exit $exitcode\n",
                "fi\n",
                "cfn-signal -e 0 -r 'Setup complete' '", {"Ref" : "AutoScalingGroupWaitHandle"}, "'\n"
              ]
            ]
          }
        }
      },
      "Metadata" : {
        "AWS::CloudFormation::Authentication" : {
          "S3AccessCreds" : {
            "type" : "S3",
            "buckets" : [{"Ref" : "DeploymentBucket"}],
            "roleName" : {"Ref" : "IAMRole"}
          }
        },
        "AWS::CloudFormation::Init" : {
          "config" : {
            "files" : {
              "/tmp/cwlogs/cwlogs.conf" : {
                "content" : {
                  "Fn::Join" : [
                    "", [
                      "[general]\n",
                      "state_file= /var/awslogs/agent-state\n",
                      "[/var/log/cfn-init.log]\n",
                      "file = /var/log/cfn-init.log\n",
                      "log_group_name = ", {"Ref" : "DeploymentLogs"}, "\n",
                      "log_stream_name = {instance_id}/cfn-init.log\n",
                      "datetime_format = %d/%b/%Y:%H:%M:%S\n",
                      "[/var/log/chef-run.log]\n",
                      "file = /var/log/chef-run.log\n",
                      "log_group_name = ", {"Ref" : "DeploymentLogs"}, "\n",
                      "log_stream_name = {instance_id}/chef-run.log\n",
                      "datetime_format = %Y-%m-%dT%H:%M:%S%z\n",
                      "[/var/lib/tomcat7/logs/catalina.out]\n",
                      "file = /var/lib/tomcat7/logs/catalina.out\n",
                      "log_group_name = ", {"Ref" : "DeploymentLogs"}, "\n",
                      "log_stream_name = {instance_id}/catalina.out\n",
                      "datetime_format = %d/%b/%Y:%H:%M:%S"
                    ]
                  ]
                },
                "mode" : "000755"
              },
              "/tmp/node.json" : {
                "content" : {
                  "Fn::Join" : [
                    "", [
                      "{\n",
                      "  \"arcgis\" : {\n",
                      "    \"version\" : \"10.4.1\",\n",
                      "    \"server\" : {\n",
                      "      \"admin_username\" : \"", {"Ref" : "SiteAdmin"}, "\",\n",
                      "      \"admin_password\" : \"", {"Ref" : "SiteAdminPassword"}, "\",\n",
                      "      \"private_url\" : \"https://10.0.0.5:6443/arcgis\"\n",
                      "    },\n",
                      "    \"data_store\" : {\n",
                      "      \"types\" : \"spatiotemporal\",\n",
                      "      \"preferredidentifier\" : \"ip\",\n",
                      "      \"data_dir\" : \"/gisdata/arcgisdatastore\",\n",
                      "      \"backup_dir\" : \"/net/10.0.0.4/gisdata/arcgisdatastore/backup\"\n",
                      "    }\n",
                      "  },\n",
                      "  \"run_list\" : [\n",
                      "    \"recipe[arcgis::datastore]\"]\n",
                      "}\n"
                    ]
                  ]
                },
                "mode" : "000755"
              }
            }
          }
        }
      }
    },
    "AutoScalingGroup" : {
      "Type" : "AWS::AutoScaling::AutoScalingGroup",
      "Properties" : {
        "VPCZoneIdentifier" : [{"Ref" : "Subnet1"}, {"Ref" : "Subnet2"}],
        "Cooldown" : "300",
        "MaxSize" : {"Ref" : "BDSInstances"},
        "MinSize" : {"Ref" : "BDSInstances"},
        "LaunchConfigurationName" : {"Ref" : "LaunchConfig"},
        "HealthCheckType" : "EC2",
        "HealthCheckGracePeriod" : "3600",
        "Tags" : [
          {
            "Key" : "Name",
            "Value" : {"Fn::Join" : ["", [{"Ref" : "AWS::StackName"}, "-bds"]]},
            "PropagateAtLaunch" : true
          }
        ]
      }
    },
    "AutoScalingGroupWaitHandle" : {
      "Type" : "AWS::CloudFormation::WaitConditionHandle",
      "Properties" : {}
    },
    "AutoScalingGroupWaitCondition" : {
      "Type" : "AWS::CloudFormation::WaitCondition",
      "DependsOn" : "LaunchConfig",
      "Properties" : {
        "Count" : {"Ref" : "BDSInstances"},
        "Handle" : {"Ref" : "AutoScalingGroupWaitHandle"},
        "Timeout" : "7200"
      }
    },
    "DeploymentLogs" : {
      "Type" : "AWS::Logs::LogGroup",
      "DeletionPolicy" : "Retain",
      "Properties" : {
        "RetentionInDays" : 7
      }
    },
    "CloudWatchSettings" : {
      "Type" : "AWS::Logs::MetricFilter",
      "DeletionPolicy" : "Retain",
      "Properties" : {
        "LogGroupName" : {"Ref" : "DeploymentLogs"},
        "FilterPattern" : "[level=FATAL, message]",
        "MetricTransformations" : [
          {
            "MetricValue" : "1",
            "MetricNamespace" : "ArcGIS/Deployment",
            "MetricName" : "ErrorCount"
          }
        ]
      }
    }
  },
  "Outputs" : {
    "ManagerURL" : {
      "Value" : {"Fn::Join" : ["", ["https://", {"Ref" : "SiteDomain"}, "/server/manager"]]},
      "Description" : "ArcGIS Server Manager URL"
    },
    "RestURL" : {
      "Value" : {"Fn::Join" : ["", ["https://", {"Ref" : "SiteDomain"}, "/server/rest"]]},
      "Description" : "ArcGIS REST Services Directory URL"
    },
    "PortalURL" : {
      "Value" : {"Fn::Join" : ["", ["https://", {"Ref" : "SiteDomain"}, "/portal/home"]]},
      "Description" : "Portal for ArcGIS Home URL"
    },
    "LogsURL" : {
      "Value" : {"Fn::Join" : ["", ["https://console.aws.amazon.com/cloudwatch/home?region=", {"Ref" : "AWS::Region"}, "#logStream:group=", {"Ref" : "DeploymentLogs"}]]},
      "Description" : "Deployment Logs"
    },
    "VPCId" : {
      "Description" : "VPC ID",
      "Value" : {"Ref" : "VPC"}
    },
    "SecurityGroup" : {
      "Description" : "Security group ID",
      "Value" : {"Fn::GetAtt" : ["SecurityGroup", "GroupId"]}
    },
    "DNSName" : {
      "Description" : "Elastic load balancer DNS name",
      "Value" : {"Fn::GetAtt" : ["ELB", "DNSName"]}
    },
    "RouteTable" : {
      "Description" : "Route table",
      "Value" : {"Ref" : "RouteTable"}
    }
  }
}